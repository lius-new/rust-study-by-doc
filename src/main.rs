fn main() {
    // 所有权,所有权系统

    // 栈堆
    // 栈和堆都是代码运行时可供使用的内存,但是结构不同

    // 栈是后进先出,增加数据称为进栈,移出的数据称为出栈.
    // 栈中的数据必须占用已知却固定大小

    // 在编译时大小未知且可能发生变化的数据要存储在堆上
    // 堆上的数据是缺乏组织的, 当向堆上放入数据的时候要先请求一定大小的内存空间,内存分配器会找到这片空间,并标记其为以使用,并返回表示该位置地址的指针

    // 入栈比在堆上分配内存要快的多. 因为在堆上分配空间要先搜索内存空间并开辟后并记录(为下一次往堆中放入)后返回表示该未知的指针,而栈总是在栈顶


    // 访问堆上的数据比访问栈上的数据要慢,因为要通过指针来访问到地址,然后通过地址来去堆中获取数据


    // **所有权规则**
    /// 1. Rust的每个值都有一个所有者
    /// 2. 值在任意时刻有且只有一个所有者
    /// 3. 当所有者(往往是一个变量)离开作用域的时候,这个值被丢弃
}
